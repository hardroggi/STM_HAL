/*
 * CryptoRSASign_ut.cpp
 *
 *  Created on: 30.08.2016
 *      Author: tobias
 */
#include "unittest.h"
#include <stdint.h>
#include <cmath>
#include <stdio.h>

#include "CryptoRSASignVerify.h"

#ifndef PMD_CRYPTO_LIBRARY
	#define PMD_CRYPTO_LIBRARY
	#include "crypto.h"
#endif

#ifndef PMD_CRYPTO_RSA_SIGN
	#define PMD_CRYPTO_RSA_SIGN
	#include "rsa.h"
#endif

/**********Test data**********/
const uint8_t T1_Modulus[] =
  {
    0xa5, 0x6e, 0x4a, 0x0e, 0x70, 0x10, 0x17, 0x58, 0x9a, 0x51, 0x87, 0xdc, 0x7e, 0xa8, 0x41, 0xd1,
    0x56, 0xf2, 0xec, 0x0e, 0x36, 0xad, 0x52, 0xa4, 0x4d, 0xfe, 0xb1, 0xe6, 0x1f, 0x7a, 0xd9, 0x91,
    0xd8, 0xc5, 0x10, 0x56, 0xff, 0xed, 0xb1, 0x62, 0xb4, 0xc0, 0xf2, 0x83, 0xa1, 0x2a, 0x88, 0xa3,
    0x94, 0xdf, 0xf5, 0x26, 0xab, 0x72, 0x91, 0xcb, 0xb3, 0x07, 0xce, 0xab, 0xfc, 0xe0, 0xb1, 0xdf,
    0xd5, 0xcd, 0x95, 0x08, 0x09, 0x6d, 0x5b, 0x2b, 0x8b, 0x6d, 0xf5, 0xd6, 0x71, 0xef, 0x63, 0x77,
    0xc0, 0x92, 0x1c, 0xb2, 0x3c, 0x27, 0x0a, 0x70, 0xe2, 0x59, 0x8e, 0x6f, 0xf8, 0x9d, 0x19, 0xf1,
    0x05, 0xac, 0xc2, 0xd3, 0xf0, 0xcb, 0x35, 0xf2, 0x92, 0x80, 0xe1, 0x38, 0x6b, 0x6f, 0x64, 0xc4,
    0xef, 0x22, 0xe1, 0xe1, 0xf2, 0x0d, 0x0c, 0xe8, 0xcf, 0xfb, 0x22, 0x49, 0xbd, 0x9a, 0x21, 0x37,
  };
const uint8_t T1_pubExp[] =
  {
    0x33, 0xa5, 0x04, 0x2a, 0x90, 0xb2, 0x7d, 0x4f, 0x54, 0x51, 0xca, 0x9b, 0xbb, 0xd0, 0xb4, 0x47,
    0x71, 0xa1, 0x01, 0xaf, 0x88, 0x43, 0x40, 0xae, 0xf9, 0x88, 0x5f, 0x2a, 0x4b, 0xbe, 0x92, 0xe8,
    0x94, 0xa7, 0x24, 0xac, 0x3c, 0x56, 0x8c, 0x8f, 0x97, 0x85, 0x3a, 0xd0, 0x7c, 0x02, 0x66, 0xc8,
    0xc6, 0xa3, 0xca, 0x09, 0x29, 0xf1, 0xe8, 0xf1, 0x12, 0x31, 0x88, 0x44, 0x29, 0xfc, 0x4d, 0x9a,
    0xe5, 0x5f, 0xee, 0x89, 0x6a, 0x10, 0xce, 0x70, 0x7c, 0x3e, 0xd7, 0xe7, 0x34, 0xe4, 0x47, 0x27,
    0xa3, 0x95, 0x74, 0x50, 0x1a, 0x53, 0x26, 0x83, 0x10, 0x9c, 0x2a, 0xba, 0xca, 0xba, 0x28, 0x3c,
    0x31, 0xb4, 0xbd, 0x2f, 0x53, 0xc3, 0xee, 0x37, 0xe3, 0x52, 0xce, 0xe3, 0x4f, 0x9e, 0x50, 0x3b,
    0xd8, 0x0c, 0x06, 0x22, 0xad, 0x79, 0xc6, 0xdc, 0xee, 0x88, 0x35, 0x47, 0xc6, 0xa3, 0xb3, 0x25,
  };
const uint8_t SHA256_Hash[] =
  {
    0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8,
    0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,
    0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67,
    0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1
  };
const uint8_t SHA256_Hash_invalid[] =
  {
    0x42, 0x1d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8,
    0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,
    0xa3, 0x3c, 0x4b, 0x59, 0x64, 0xff, 0x21, 0x67,
    0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1
  };
const uint8_t T1_signature_1[] =
  {
    0x6b, 0xc3, 0xa0, 0x66, 0x56, 0x84, 0x29, 0x30, 0xa2, 0x47, 0xe3, 0x0d, 0x58, 0x64, 0xb4, 0xd8,
    0x19, 0x23, 0x6b, 0xa7, 0xc6, 0x89, 0x65, 0x86, 0x2a, 0xd7, 0xdb, 0xc4, 0xe2, 0x4a, 0xf2, 0x8e,
    0x86, 0xbb, 0x53, 0x1f, 0x03, 0x35, 0x8b, 0xe5, 0xfb, 0x74, 0x77, 0x7c, 0x60, 0x86, 0xf8, 0x50,
    0xca, 0xef, 0x89, 0x3f, 0x0d, 0x6f, 0xcc, 0x2d, 0x0c, 0x91, 0xec, 0x01, 0x36, 0x93, 0xb4, 0xea,
    0x00, 0xb8, 0x0c, 0xd4, 0x9a, 0xac, 0x4e, 0xcb, 0x5f, 0x89, 0x11, 0xaf, 0xe5, 0x39, 0xad, 0xa4,
    0xa8, 0xf3, 0x82, 0x3d, 0x1d, 0x13, 0xe4, 0x72, 0xd1, 0x49, 0x05, 0x47, 0xc6, 0x59, 0xc7, 0x61,
    0x7f, 0x3d, 0x24, 0x08, 0x7d, 0xdb, 0x6f, 0x2b, 0x72, 0x09, 0x61, 0x67, 0xfc, 0x09, 0x7c, 0xab,
    0x18, 0xe9, 0xa4, 0x58, 0xfc, 0xb6, 0x34, 0xcd, 0xce, 0x8e, 0xe3, 0x58, 0x94, 0xc4, 0x84, 0xd7,
  };

/**********Mocked cryptography functions**********/
int32_t RSA_PKCS1v15_Verify(const RSApubKey_stt *P_pPubKey, const uint8_t *P_pDigest, hashType_et P_hashType, const uint8_t *P_pSignature, membuf_stt *P_pMemBuf){
	if(NULL == P_pDigest){
		return RSA_ERR_UNSUPPORTED_HASH;
	}
	bool valid =true;
	for(int i=0; i<sizeof(SHA256_Hash); i++){
		if(SHA256_Hash[i] != P_pDigest[i] ){
			valid = false;
			break;
		}
	}
	if(valid){
		return SIGNATURE_VALID;
	} else {
		return SIGNATURE_INVALID;
	}

}

void Crypto_DeInit(){
	/*
	 * Empty Function
	 * No initialization necessary
	 */
}

/**********Tests**********/
/*
 * @brief 	Tests if invalid input will return the expected error Code
 * @param  	None
 * @retval 	Amount of errors
 */
int ut_Test_errors_Verifyprocess(){
    TestCaseBegin();

    Crypto_RSA_Sign_Verify RSA_Verify_Only_Sign;
    CHECK(0 == RSA_Verify_Only_Sign.setSignedHash((uint8_t*)T1_signature_1, sizeof(T1_signature_1)));
    CHECK(2 == RSA_Verify_Only_Sign.verifyHash((uint8_t*)SHA256_Hash, sizeof(SHA256_Hash)));

    Crypto_RSA_Sign_Verify RSA_Verify_Only_Key;
    CHECK(0 == RSA_Verify_Only_Key.setPublicKey((uint8_t*)T1_pubExp, (uint8_t)sizeof(T1_pubExp), (uint8_t*)T1_Modulus, (uint8_t)sizeof(T1_Modulus)));
    CHECK(3 == RSA_Verify_Only_Key.verifyHash((uint8_t*)SHA256_Hash, sizeof(SHA256_Hash)));

    Crypto_RSA_Sign_Verify RSA_Verify;
    CHECK(1 == RSA_Verify.setPublicKey((uint8_t*)T1_pubExp, 5, (uint8_t*)T1_Modulus, (uint8_t)sizeof(T1_Modulus)));
    CHECK(2 == RSA_Verify.setPublicKey((uint8_t*)T1_pubExp, (uint8_t)sizeof(T1_pubExp), (uint8_t*)T1_Modulus, 5));
    CHECK(0 == RSA_Verify.setPublicKey((uint8_t*)T1_pubExp, (uint8_t)sizeof(T1_pubExp), (uint8_t*)T1_Modulus, (uint8_t)sizeof(T1_Modulus)));

    CHECK(1 == RSA_Verify.setSignedHash((uint8_t*)T1_signature_1, 5));
    CHECK(0 == RSA_Verify.setSignedHash((uint8_t*)T1_signature_1, sizeof(T1_signature_1)));

    CHECK(4 == RSA_Verify.verifyHash((uint8_t*)SHA256_Hash, 5));
    CHECK(5 == RSA_Verify.verifyHash(NULL, sizeof(SHA256_Hash)));

    TestCaseEnd();
}

/*
 * @brief 	Tests a regular verifying process
 * @param  	None
 * @retval 	Amount of errors
 */
int ut_Test_regular_Verifyprocess(){
    TestCaseBegin();

    Crypto_RSA_Sign_Verify RSA_Verify;
    CHECK(0 == RSA_Verify.setPublicKey((uint8_t*)T1_pubExp, (uint8_t)sizeof(T1_pubExp), (uint8_t*)T1_Modulus, (uint8_t)sizeof(T1_Modulus)));
    CHECK(0 == RSA_Verify.setSignedHash((uint8_t*)T1_signature_1, sizeof(T1_signature_1)));

    /*Test valid hash*/
    CHECK(0 == RSA_Verify.verifyHash((uint8_t*)SHA256_Hash, sizeof(SHA256_Hash)));

    /*Test invalid hash*/
    CHECK(1 == RSA_Verify.verifyHash((uint8_t*)SHA256_Hash_invalid, sizeof(SHA256_Hash_invalid)));

    TestCaseEnd();
}

int main(int argc, const char* argv[]){
    UnitTestMainBegin();

    RunTest(true, ut_Test_regular_Verifyprocess);
    RunTest(true, ut_Test_errors_Verifyprocess);
    //RunTest(true, ut_Test_dummy);

    UnitTestMainEnd();
}
