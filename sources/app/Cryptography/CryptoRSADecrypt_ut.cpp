/*
 * CryptoRSADecrypt_ut.cpp
 *
 *  Created on: 01.09.2016
 *      Author: tobias
 */
#include "unittest.h"

#include <stdint.h>
#include <cmath>
#include <stdio.h>

#include "CryptoRSADecrypt.h"

#ifndef PMD_CRYPTO_LIBRARY
#define PMD_CRYPTO_LIBRARY
#include "crypto.h"
#endif

int32_t information_size;
uint8_t information[PMD_CRYPTO_RSA_DECRYPT_PACKAGE_SIZE];

/**********Test data**********/
//#warning no real RSA Key-Pairs, AES Information oder Signatures. Only random Numbers.
uint8_t modulus[] = {
    0x56, 0xf2, 0xec, 0x0e, 0x36, 0xad, 0x52, 0xa4, 0x4d, 0xfe, 0xb1, 0xe6, 0x1f, 0x7a, 0xd9, 0x91,
    0xd5, 0xcd, 0x95, 0x08, 0x09, 0x6d, 0x5b, 0x2b, 0x8b, 0x6d, 0xf5, 0xd6, 0x71, 0xef, 0x63, 0x77,
    0xd8, 0xc5, 0x10, 0x56, 0xff, 0xed, 0xb1, 0x62, 0xb4, 0xc0, 0xf2, 0x83, 0xa1, 0x2a, 0x88, 0xa3,
    0xef, 0x22, 0xe1, 0xe1, 0xf2, 0x0d, 0x0c, 0xe8, 0xcf, 0xfb, 0x22, 0x49, 0xbd, 0x9a, 0x21, 0x37,
    0x94, 0xdf, 0xf5, 0x26, 0xab, 0x72, 0x91, 0xcb, 0xb3, 0x07, 0xce, 0xab, 0xfc, 0xe0, 0xb1, 0xdf,
    0xc0, 0x92, 0x1c, 0xb2, 0x3c, 0x27, 0x0a, 0x70, 0xe2, 0x59, 0x8e, 0x6f, 0xf8, 0x9d, 0x19, 0xf1,
    0x05, 0xac, 0xc2, 0xd3, 0xf0, 0xcb, 0x35, 0xf2, 0x92, 0x80, 0xe1, 0x38, 0x6b, 0x6f, 0x64, 0xc4,
    0xa5, 0x6e, 0x4a, 0x0e, 0x70, 0x10, 0x17, 0x58, 0x9a, 0x51, 0x87, 0xdc, 0x7e, 0xa8, 0x41, 0xd1,
};
uint8_t prvKey[] = {
    0xa3, 0xb3, 0x25, 0x06, 0x22, 0xad, 0x79, 0xc6, 0x47, 0xc6, 0x50, 0x1a, 0x53, 0xbe, 0x51, 0xca,
    0xc6, 0xa3, 0xca, 0x09, 0x29, 0xf1, 0xe8, 0xf1, 0x12, 0x31, 0x88, 0x44, 0x29, 0xfc, 0x4d, 0x9a,
    0x33, 0xa5, 0x88, 0x43, 0x40, 0xae, 0xd7, 0xe7, 0x34, 0xe4, 0x47, 0x27, 0xb2, 0x7d, 0x4f, 0x54,
    0x94, 0xa7, 0x24, 0xac, 0x3c, 0x56, 0x8c, 0x8f, 0x97, 0x85, 0x3a, 0xd0, 0x7c, 0x02, 0x66, 0xc8,
    0x90, 0x9c, 0x2a, 0xba, 0xca, 0xba, 0x28, 0x3c, 0x9b, 0xbb, 0xd0, 0xb4, 0x47, 0xa3, 0x95, 0x74,
    0xe5, 0x5f, 0xee, 0x89, 0x6a, 0x10, 0xce, 0x70, 0x7c, 0x3e, 0xd8, 0x0c, 0xdc, 0xee, 0x88, 0x35,
    0x31, 0xb4, 0xbd, 0x2f, 0x53, 0xc3, 0xee, 0x37, 0xe3, 0x52, 0xce, 0xe3, 0x4f, 0x9e, 0x50, 0x3b,
    0x71, 0x26, 0x83, 0x10, 0x4b, 0xa1, 0x01, 0xaf, 0xf9, 0x88, 0x5f, 0x2a, 0x04, 0x2a, 0x92, 0xe8,
};
uint8_t encryptedInformation[] = {
    0x6b, 0xc3, 0xa0, 0x66, 0x56, 0x84, 0x29, 0x30, 0xa2, 0x47, 0xe3, 0x0d, 0x58, 0x64, 0xb4, 0xd8,
    0x19, 0x23, 0x6b, 0xa7, 0xc6, 0x89, 0x65, 0x86, 0x2a, 0xd7, 0xdb, 0xc4, 0xe2, 0x4a, 0xf2, 0x8e,
    0x7f, 0x3d, 0x24, 0x08, 0x7d, 0xdb, 0x6f, 0x2b, 0x72, 0x09, 0x61, 0x67, 0xfc, 0x09, 0x7c, 0xab,
    0xca, 0xef, 0x89, 0x3f, 0x0d, 0x6f, 0xcc, 0x2d, 0x0c, 0x91, 0xec, 0x01, 0x36, 0x93, 0xb4, 0xea,
    0x00, 0xb8, 0x0c, 0xd4, 0x9a, 0xac, 0x4e, 0xcb, 0x5f, 0x89, 0x11, 0xaf, 0xe5, 0x39, 0xad, 0xa4,
    0xa8, 0xf3, 0x82, 0x3d, 0x1d, 0x13, 0xe4, 0x72, 0xd1, 0x49, 0x05, 0x47, 0xc6, 0x59, 0xc7, 0x61,
    0x18, 0xe9, 0xa4, 0x58, 0xfc, 0xb6, 0x34, 0xcd, 0xce, 0x8e, 0xe3, 0x58, 0x94, 0xc4, 0x84, 0xd7,
    0x86, 0xbb, 0x53, 0x1f, 0x03, 0x35, 0x8b, 0xe5, 0xfb, 0x74, 0x77, 0x7c, 0x60, 0x86, 0xf8, 0x50,
};
const uint8_t decryptedInformation[] = {
    0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/**********Mocked cryptography functions**********/
int32_t RSA_PKCS1v15_Decrypt(const RSAprivKey_stt* P_pPrivKey,
                             RSAinOut_stt*         P_pInOut_st,
                             int32_t*              P_pOutputSize,
                             membuf_stt*           P_pMemBuf)
{
    for (int i = 0; i < PMD_CRYPTO_RSA_DECRYPT_PACKAGE_SIZE; i++) {
        if (encryptedInformation[i] != P_pInOut_st->pmInput[i]) {
            return RSA_ERR_BAD_PARAMETER;
        }
    }

    for (int i = 0; i < PMD_CRYPTO_RSA_DECRYPT_PACKAGE_SIZE; i++) {
        P_pInOut_st->pmOutput[i] = decryptedInformation[i];
    }
    *P_pOutputSize = PMD_CRYPTO_RSA_DECRYPT_PACKAGE_SIZE;

    return RSA_SUCCESS;
}

/**********Tests**********/
/*
 * @brief       Tests if the function getDecryptedAESInformation returns the correct errorcode on incorrect usage
 * @param       None
 * @retval      Amount of errors
 */
int ut_Test_error_Decryptionprocess()
{
    TestCaseBegin();

    Crypto_RSA_Decrypt rsaDecrypt;
    CHECK(1 ==
          rsaDecrypt.getDecryptedAESInformation(encryptedInformation, sizeof(encryptedInformation), information,
                                                &information_size));

    CHECK(0 == rsaDecrypt.setPrivateKey(prvKey, sizeof(prvKey), modulus, sizeof(modulus)));
    CHECK(2 == rsaDecrypt.getDecryptedAESInformation(encryptedInformation, 0, information, &information_size));
    CHECK(3 ==
          rsaDecrypt.getDecryptedAESInformation(prvKey, sizeof(encryptedInformation), information, &information_size));

    TestCaseEnd();
}

/*
 * @brief       Tests the regular Decryption process. Initialization occurs with the setKey method
 * @param       None
 * @retval      Amount of errors
 */
int ut_Test_regular_Decryptionyprocess_setKey()
{
    TestCaseBegin();

    Crypto_RSA_Decrypt rsaDecrypt;
    CHECK(0 == rsaDecrypt.setPrivateKey(prvKey, sizeof(prvKey), modulus, sizeof(modulus)));
    CHECK(0 ==
          rsaDecrypt.getDecryptedAESInformation(encryptedInformation, sizeof(encryptedInformation), information,
                                                &information_size));

    for (int i = 0; i < PMD_CRYPTO_RSA_DECRYPT_PACKAGE_SIZE; i++) {
        CHECK(decryptedInformation[i] == information[i]);
    }

    TestCaseEnd();
}

/*
 * @brief       Tests the regular Decryption process. Initialization occurs with the generateKeyPair method
 *                      The generateKeyPair method is currently not available!
 * @param       None
 * @retval      Amount of errors
 */
int ut_Test_regular_Decryptionyprocess_generateKey()
{
    TestCaseBegin();

    Crypto_RSA_Decrypt rsaDecrypt;
    //CHECK(0 == rsaDecrypt.generateKeyPair());
    //CHECK(0 == rsaDecrypt.getDecryptedAESInformation(encryptedInformation, sizeof(encryptedInformation), information, &information_size));

    TestCaseEnd();
}

int main(int argc, const char* argv[])
{
    UnitTestMainBegin();

    RunTest(true, ut_Test_error_Decryptionprocess);
    RunTest(true, ut_Test_regular_Decryptionyprocess_setKey);
    RunTest(false, ut_Test_regular_Decryptionyprocess_generateKey);

    UnitTestMainEnd();
}
